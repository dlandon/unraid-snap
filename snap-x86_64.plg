<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY plugin "SNAP">
<!ENTITY plgver "1.4">
]>

<PLUGIN>
<!--
Copyright (C) 2010-2013 by Dave Lewis & Dan Landon

This file is part of the SNAP plugin for unRAID.

SNAP is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SNAP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SNAP.  If not, see <http://www.gnu.org/licenses/>.

This Plugin installs SNAP for UnRaid.
All dependencies are installed as needed and everything is controlable from the webgui.

Filename: snap-x86_64.plg
-->

<FILE Name="/tmp/SnapPrepare" Run="/bin/bash">
<INLINE>
# Wait until network is ready
timer=30
while [ $timer -gt 0 ]; do
	gateway=$(route -n | awk '/^0.0.0.0/ {print $2}')
	if [ -n "$gateway" ] &amp;&amp; [ $(ping -q -n -c 1 $gateway | awk -F, '/received/ {print $2}' | awk '{print $1}') -eq 1 ]; then
		break
	fi
	timer=$((timer-1))
	sleep 1
done
if [ $timer -eq 0 ]; then
	echo "No network communication !!!"
fi
# Remove this script
rm -f /tmp/SnapPrepare
</INLINE>
</FILE>

<FILE Name="/boot/packages/inotify-tools-3.14-x86_64-1.txz" Run="upgradepkg --install-new">
<URL>http://slackware.oregonstate.edu/slackware64-14.1/slackware64/a/inotify-tools-3.14-x86_64-1.txz</URL>
<MD5>54d5c31bd9b6ed66b5535a5256ef094c</MD5>
</FILE>

<FILE Name="/tmp/preSnapInstallCleanup.sh"  Run="/bin/bash">
<INLINE>
<![CDATA[
#!/bin/bash
if [ -d /tmp/snap ]
then
	rm -r /tmp/snap
fi
if [ -f /tmp/latestSnapVer ]
then
	rm /tmp/latestSnapVer 
fi
if [ -f /tmp/prepareForSnapInstall.sh ]
then
	rm /tmp/prepareForSnapInstall.sh
fi
if [ -f /etc/rc.d/rc.snap ]
then
	rm /etc/rc.d/rc.snap
fi
if [ -f /usr/local/emhttp/plugins/snap/snap.png ]
then
	rm /usr/local/emhttp/plugins/snap/snap.png
fi
]]>
</INLINE>
</FILE>

<FILE Name="/tmp/prepareForSnapInstall.sh"  Run="/bin/bash">
<INLINE>
<![CDATA[
#!/bin/bash
#
# Check if snap is already installed.
#
if [ -f /boot/config/plugins/snap/snap.sh ]
then
	echo "snap exists" >>/tmp/snap.log
	#
	# SNAP is installed
	#
	# Load the existing web component.
	#
	echo "Loading web component" >>/tmp/snap.log
	cd /usr/local/emhttp/plugins
	if [ -d /usr/local/emhttp/plugins/snap ]
	then
		rm -r /usr/local/emhttp/plugins/snap
	fi
	if [ -f /usr/local/emhttp/plugins/snap_web.tgz ]
	then
		rm /usr/local/emhttp/plugins/snap_web.tgz
	fi
	#
	# install web component
	#
	cp /boot/config/plugins/snap/snap_web.tgz /usr/local/emhttp/plugins
	/usr/bin/tar -xzf snap_web.tgz
	rm /usr/local/emhttp/plugins/snap_web.tgz
else
	#
	# Snap isn't installed yet.
	#
	echo "snap not installed yet." >>/tmp/snap.log

	#
	# Download the snap version file.
	#
	wget -t2 -q -O /tmp/latestSnapVer --no-check-certificate https://github.com/dlandon/unraid-snap/raw/master/LatestSnapVersion
	sleep 2
	checkit=`cat /tmp/latestSnapVer| grep 'LatestSnapVersion=' `
	if [ -n "$checkit" ]
	then
		versionCode=`/usr/bin/grep -o 'Version=[0-9].[0-9][0-9]' /tmp/latestSnapVer|head -1`
		latestVersion=`echo "$versionCode"|/usr/bin/cut -d'=' -f2`
		echo "version is=$latestVersion" |tee -a /tmp/snap.log
	else
		echo "Error: Unable to download LatestSnapVersion information from GitHub." |tee -a  /tmp/snap.log
		exit
	fi
	
	if [ -d /tmp/snap ]
	then
		rm -r /tmp/snap
	fi
	if [ -f /tmp/installSnap_Code.sh ]
	then
		rm /tmp/installSnap_Code.sh 
	fi
	echo "Downloading bundle" |tee -a  /tmp/snap.log
	
	cd /tmp
	mkdir snap
	cd /tmp/snap

	#
	# Download the bundle.
	#
	wget -t2 -q -O /tmp/snap/snapBundle.tar --no-check-certificate https://github.com/dlandon/unraid-snap/raw/master/snap-$latestVersion.tar
	echo "Bundle downloaded" >>/tmp/snap.log
	cd /tmp/snap

	#
	# Extract the bundle.
	#
	echo "extracting bundle" >>/tmp/snap.log
	cd /tmp/snap
	/usr/bin/tar -xf snapBundle.tar

	#
	# Install SNAP
	#
	echo "install SNAP" >>/tmp/snap.log
	cd /tmp/snap
	pwd >>/tmp/snap.log
	
	echo "creating /tmp/snap/snapCode directory" >> /tmp/snap.log
	/usr/bin/mkdir /tmp/snap/snapCode  
	echo "copying /tmp/snap/snapCode.tar /tmp/snap/snapCode" >> /tmp/snap.log
	cp /tmp/snap/snapCode.tar /tmp/snap/snapCode
	
	echo "listing files in /tmp/snap" >> /tmp/snap.log
	find /tmp/snap -print >>/tmp/snap.log
	cd /tmp/snap/snapCode
	echo "extracting /tmp/snap/snapCode.tar" >>/tmp/snap.log
	
	/usr/bin/tar -xf ./snapCode.tar
	rm ./snapCode.tar
	echo 'extracted /tmp/snap/snapCode.tar' >>/tmp/snap.log
	if [ -d /tmp/snap/snapCode ]
	then echo "snapCode dir exists" >>/tmp/snap.log
	else echo "snapCode dir does not exist" >>/tmp/snap.log
	fi
	option="`/tmp/snap/snapCode/snap-Install.sh -t`"
	echo "install option=$option" >>/tmp/snap.log

	if [[ "$option" =~ 'reinstall' ]]
	then
		/tmp/snap/snapCode/snap-Install.sh -r
	fi
	if [[ "$option" =~ 'install' ]]
	then
		echo "Installing SNAP..."
		/tmp/snap/snapCode/snap-Install.sh -i
	fi
	if [[ "$option" =~ 'update' ]]
	then
		/tmp/snap/snapCode/snap-Install.sh -r
	fi
	#
	# Copy the web component to snap folder to be installed every boot cycle.
	#
	echo "copying web component" >>/tmp/snap.log
	
	cp /tmp/snap/snap_web.tgz /boot/config/plugins/snap/snap_web.tgz

	#
	# Install the web component (UI).
	#
	echo "installing web component" >>/tmp/snap.log
	cd /usr/local/emhttp/plugins 2>>/dev/null
	rm -r /usr/local/emhttp/plugins/snap 2>>/dev/null
	rm /usr/local/emhttp/plugins/snap_web.tgz 2>>/dev/null
	cp /boot/config/plugins/snap/snap_web.tgz /usr/local/emhttp/plugins 2>>/dev/null
	/usr/bin/tar -xzf snap_web.tgz 2>>/dev/null
	rm /usr/local/emhttp/plugins/snap_web.tgz 2>>/dev/null
fi
]]>

</INLINE>
</FILE>
<FILE Name="/tmp/SnapInstall.sh"  Run="/bin/bash">
<INLINE>
<![CDATA[
#!/bin/bash
if [ -f /tmp/preSnapInstallCleanup.sh ]
then
	rm /tmp/preSnapInstallCleanup.sh
fi
if [ -f /tmp/prepareForSnapInstall.sh ]
then
	rm /tmp/prepareForSnapInstall.sh 
fi

#
# Start SNAP and mount any SNAP (usb) drives found.
#
/boot/config/plugins/snap/snap.sh -b &

rm /tmp/SnapInstall.sh
]]>
</INLINE>
</FILE>

<FILE Name="/etc/rc.d/rc.snap" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
# start|stop|restart|enable|disable|install|buttonstart|storagesize|datacheck|updateplg|updateapp|getver snap.

snap_start()
{
	/boot/config/plugins/snap/snap.sh -enable
	/boot/config/plugins/snap/snap.sh -b
	echo "... Snap started"
	sleep 1
}

snap_stop()
{   
	/boot/config/plugins/snap/snapNotify.sh *stop*
	/boot/config/plugins/snap/snapSambaNotify.sh *stop*
	/boot/config/plugins/snap/snap.sh -disable
	echo "... Snap stopped"
	sleep 2
}

snap_restart()
{
	snap_stop
	snap_start
	echo "... Snap restarted"
}

snap_updateplg()
{
	if [ -f /boot/config/plugins/snap-x86_64.plg ];
	then
		echo "Downloading plugin..."
		wget -t2 -q -O /tmp/snap-x86_64.plg --no-check-certificate https://github.com/dlandon/unraid-snap/raw/master/snap-x86_64.plg
		if [ ! -f /tmp/snap-x86_64.plg ];
		then
			echo "Download failed, update aborted!"
			sleep 2
		else
			echo "...OK"
			sleep 1
			echo  "Upgrading plugin..."
			sleep 1
			mv -f /boot/config/plugins/snap-x86_64.plg /boot/config/plugins/snap/snap-x86_64.plg.sav 2>/dev/null
			mv -f /tmp/snap-x86_64.plg /boot/config/plugins/snap-x86_64.plg 2>/dev/null
			/usr/local/sbin/installplg /boot/config/plugins/snap-x86_64.plg 2>/dev/null
			echo "...OK"
			sleep 1
		fi
	fi
}

snap_updateapp()
{
	result=`/boot/config/plugins/snap/snap.sh -checkForUpdate`
	if [ "$result" == "yes" ]
	then
		echo "Downloading SNAP..."
		result=`/boot/config/plugins/snap/snap.sh -downloadUpdate`
		if [ "$result" == "yes" ]
		then
			echo "Updating SNAP..."
			result=`/boot/config/plugins/snap/snap.sh -installUpdate-step1`
			if [ "$result" == "yes" ]
			then
				/boot/config/plugins/snap/snap.sh -installUpdate-step2
				/usr/local/sbin/installplg /boot/config/plugins/snap-x86_64.plg 2>/dev/null
				echo "...OK"
			else
				echo "SNAP could not update..."
			fi
		else
			echo "Download failed, update aborted!"
		fi
	else
		echo "No update available!"
	fi
}

snap_plgver()
{
	case "$1" in
	'local')
		if [ -f /boot/config/plugins/snap-x86_64.plg ]; then
			version=$(grep "<\!ENTITY plgver " /boot/config/plugins/snap-x86_64.plg | cut -d\" -f2)
		else
			version=Unknown
		fi
	;;
	'remote')
		version=$(wget --no-check-certificate -q https://github.com/dlandon/unraid-snap/raw/master/snap-x86_64.plg -O - | grep "<\!ENTITY plgver " | cut -d\" -f2)
		if [ "$version" == "" ]; then
			version=Unknown
		fi
	;;
	esac
	echo -n "$version"
}

snap_appver()
{
	case "$1" in
	'local')
		version=`/boot/config/plugins/snap/snap.sh -v`
	;;
	'remote')
		version=Unknown
		if [ -f /tmp/latestSnapVer ]
		then
			rm /tmp/latestSnapVer 2>>/dev/null
		fi
		wget --cookies=off -t2 -q -O /tmp/latestSnapVer --no-check-certificate https://github.com/dlandon/unraid-snap/raw/master/LatestSnapVersion
		sleep 1
		if [ -f /tmp/latestSnapVer ]
		then
			checkit=`cat /tmp/latestSnapVer| grep 'LatestSnapVersion=' `
			if [ -n "$checkit" ]
			then
				versionCode=`/usr/bin/grep -o 'Version=[0-9].[0-9][0-9]' /tmp/latestSnapVer|head -1`
				version=`echo "$versionCode"|/usr/bin/cut -d'=' -f2`
			fi
		fi
	;;
	esac
	echo -n "$version"
}

snap_getver()
{
	if [[ ! -z $1 && ! -z $2 ]];
	then
		case "$1" in
			'plg')
				snap_plgver $2
			;;
			'app')
				snap_appver $2
			;;
		esac
	else
		echo "usage $0 getver plg|app local|remote"
	fi
}

case "$1" in
	'start')
		snap_start
	;;
	'stop')
		snap_stop
	;;
	'restart')
		snap_restart
	;;
	'updateplg')
		snap_updateplg
	;;
	'updateapp')
		snap_updateapp
	;;
	'getver')
		snap_getver $2 $3
	;;  
	*)
	echo "usage $0 start|stop|restart|updateplg|updateapp|getver"
esac
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/snap/snap.png">
<URL>-q --no-check-certificate https://github.com/dlandon/unraid-snap/raw/master/snap.png</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/snap/snap.page">
<INLINE>
<![CDATA[
Menu="OtherSettings"
Icon="snap.png"
Version="5.18"
Author="Queeg"
Type="php"
Title="SNAP"
]]>
</INLINE>
</FILE>

<!-- event handler -->
<FILE Name="/usr/local/emhttp/plugins/snap/event/stopped" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
/boot/config/plugins/snap/snap.sh -unmountAll 2>&1 >/dev/null &
]]>
</INLINE>
</FILE>

</PLUGIN>
