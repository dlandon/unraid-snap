<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name      "snap">
<!ENTITY author    "Queeg/dlandon">
<!ENTITY version   "2014.09.04">
<!ENTITY category  "Mount Non-array Disks">
<!ENTITY pluginURL "https://github.com/dlandon/unraid-snap/raw/master/snap-x86_64.plg">
]>

<PLUGIN  name="&name;"
         author="&author;"
         version="&version;"
         category="&category;"
         pluginURL="&pluginURL;">

<!--
Copyright (C) 2010-2014, Dave Lewis or Queegtech.com

All rights reserved.

Redistribution and use in source and binary forms, without modification,
are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Any redistribution or use is done solely for personal benefit and not for any
   commercial purpose or for monetary gain.  Companies may install and use on
   servers they own.  Commercial users, please notify owner within 30 days of installation.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED

You should have received a copy of the GNU General Public License
along with SNAP.  If not, see <http://www.gnu.org/licenses/>.

This Plugin installs SNAP for UnRaid.
All dependencies are installed as needed and everything is controlable from the webgui.

Filename: snap-x86_64.plg
-->

<FILE Name="/boot/packages/inotify-tools-3.14-x86_64-1.txz" Run="upgradepkg --install-new">
<URL>http://slackware.oregonstate.edu/slackware64-14.1/slackware64/a/inotify-tools-3.14-x86_64-1.txz</URL>
<MD5>54d5c31bd9b6ed66b5535a5256ef094c</MD5>
</FILE>

<FILE Name="/tmp/preSnapInstallCleanup.sh" Run="/bin/bash">
<INLINE>
<![CDATA[
#!/bin/bash
if [ -d /tmp/snap ]
then
	rm -r /tmp/snap
fi
if [ -f /tmp/prepareForSnapInstall.sh ]
then
	rm /tmp/prepareForSnapInstall.sh
fi
if [ -f /etc/rc.d/rc.snap ]
then
	rm /etc/rc.d/rc.snap
fi
if [ -f /usr/local/emhttp/plugins/snap/snap.png ]
then
	rm /usr/local/emhttp/plugins/snap/snap.png
fi
]]>
</INLINE>
</FILE>

<FILE Name="/tmp/prepareForSnapInstall.sh" Run="/bin/bash">
<INLINE>
<![CDATA[
#!/bin/bash
#
# Check if snap is already installed.
#
if [ -f /boot/config/plugins/snap/snap.sh ]
then
	echo "snap exists" >>/tmp/snap.log
	#
	# SNAP is installed
	#
	# Load the existing web component.
	#
	echo "Loading web component" >>/tmp/snap.log
	cd /usr/local/emhttp/plugins
	if [ -d /usr/local/emhttp/plugins/snap ]
	then
		rm -r /usr/local/emhttp/plugins/snap
	fi
	if [ -f /usr/local/emhttp/plugins/snap_web.tgz ]
	then
		rm /usr/local/emhttp/plugins/snap_web.tgz
	fi
	#
	# install web component
	#
	cp /boot/config/plugins/snap/snap_web.tgz /usr/local/emhttp/plugins
	/usr/bin/tar -xzf snap_web.tgz
	rm /usr/local/emhttp/plugins/snap_web.tgz
else
	#
	# Snap isn't installed yet.
	#
	echo "snap not installed yet." >>/tmp/snap.log

	if [ -d /tmp/snap ]
	then
		rm -r /tmp/snap
	fi
	if [ -f /tmp/installSnap_Code.sh ]
	then
		rm /tmp/installSnap_Code.sh 
	fi
	echo "Downloading bundle" |tee -a  /tmp/snap.log
	
	cd /tmp
	mkdir snap
	cd /tmp/snap

	#
	# Download the bundle.
	#
	wget -t2 -q -O /tmp/snap/snapBundle.tar https://github.com/dlandon/unraid-snap/raw/master/snap-6.00.tar
	echo "Bundle downloaded" >>/tmp/snap.log
	cd /tmp/snap

	#
	# Extract the bundle.
	#
	echo "extracting bundle" >>/tmp/snap.log
	cd /tmp/snap
	/usr/bin/tar -xf snapBundle.tar

	#
	# Install SNAP
	#
	echo "install SNAP" >>/tmp/snap.log
	cd /tmp/snap
	pwd >>/tmp/snap.log
	
	echo "creating /tmp/snap/snapCode directory" >> /tmp/snap.log
	/usr/bin/mkdir /tmp/snap/snapCode  
	echo "copying /tmp/snap/snapCode.tar /tmp/snap/snapCode" >> /tmp/snap.log
	cp /tmp/snap/snapCode.tar /tmp/snap/snapCode
	
	echo "listing files in /tmp/snap" >> /tmp/snap.log
	find /tmp/snap -print >>/tmp/snap.log
	cd /tmp/snap/snapCode
	echo "extracting /tmp/snap/snapCode.tar" >>/tmp/snap.log
	
	/usr/bin/tar -xf ./snapCode.tar
	rm ./snapCode.tar
	echo 'extracted /tmp/snap/snapCode.tar' >>/tmp/snap.log
	if [ -d /tmp/snap/snapCode ]
	then echo "snapCode dir exists" >>/tmp/snap.log
	else echo "snapCode dir does not exist" >>/tmp/snap.log
	fi
	option="`/tmp/snap/snapCode/snap-Install.sh -t`"
	echo "install option=$option" >>/tmp/snap.log

	if [[ "$option" =~ 'reinstall' ]]
	then
		/tmp/snap/snapCode/snap-Install.sh -r
	fi
	if [[ "$option" =~ 'install' ]]
	then
		echo "Installing SNAP..."
		/tmp/snap/snapCode/snap-Install.sh -i
	fi
	if [[ "$option" =~ 'update' ]]
	then
		/tmp/snap/snapCode/snap-Install.sh -r
	fi
	#
	# Copy the web component to snap folder to be installed every boot cycle.
	#
	echo "copying web component" >>/tmp/snap.log
	
	cp /tmp/snap/snap_web.tgz /boot/config/plugins/snap/snap_web.tgz

	#
	# Install the web component (UI).
	#
	echo "installing web component" >>/tmp/snap.log
	cd /usr/local/emhttp/plugins 2>>/dev/null
	rm -r /usr/local/emhttp/plugins/snap 2>>/dev/null
	rm /usr/local/emhttp/plugins/snap_web.tgz 2>>/dev/null
	cp /boot/config/plugins/snap/snap_web.tgz /usr/local/emhttp/plugins 2>>/dev/null
	/usr/bin/tar -xzf snap_web.tgz 2>>/dev/null
	rm /usr/local/emhttp/plugins/snap_web.tgz 2>>/dev/null
fi

# remove our jQuery from snap.php if Dynamix is running
if [ -f /var/log/plugins/dynamix.webGui ]
then
	sed -i -e 's/<script src="\/plugins\/snap\/jquery.cookie.js" type="text\/javascript"><\/script>/ /' /usr/local/emhttp/plugins/snap/snap.php
	sed -i -e 's/<script src="\/plugins\/snap\/jquery.qtip-1.0.0-rc3.min.js" type="text\/javascript"><\/script>/ /' /usr/local/emhttp/plugins/snap/snap.php
fi
]]>
</INLINE>
</FILE>

<FILE Name="/etc/rc.d/rc.snap" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
# start|stop|restart|getver snap.

snap_start()
{
	/boot/config/plugins/snap/snap.sh -enable
	/boot/config/plugins/snap/snap.sh -b
	echo "... Snap started"
	sleep 1
}

snap_stop()
{   
	/boot/config/plugins/snap/snapNotify.sh *stop*
	/boot/config/plugins/snap/snapSambaNotify.sh *stop*
	/boot/config/plugins/snap/snap.sh -disable
	echo "... Snap stopped"
	sleep 2
}

snap_restart()
{
	snap_stop
	snap_start
	echo "... Snap restarted"
}

snap_plgver()
{
	case "$1" in
	'local')
		if [ -f /boot/config/plugins/snap-x86_64.plg ]; then
			version=$(grep "<\!ENTITY version " /boot/config/plugins/snap-x86_64.plg | cut -d\" -f2)
		else
			version=Unknown
		fi
	;;
	'remote')
		version=$(wget -q https://github.com/dlandon/unraid-snap/raw/master/snap-x86_64.plg -O - | grep "<\!ENTITY version " | cut -d\" -f2)
		if [ "$version" == "" ]; then
			version=Unknown
		fi
	;;
	esac
	echo -n "$version"
}

snap_getver()
{
	if [[ ! -z $1 && ! -z $2 ]];
	then
		case "$1" in
			'plg')
				snap_plgver $2
			;;
			'app')
				snap_plgver $2
			;;
		esac
	else
		echo "usage $0 getver plg|app local|remote"
	fi
}

case "$1" in
	'start')
		snap_start
	;;
	'stop')
		snap_stop
	;;
	'restart')
		snap_restart
	;;
	'getver')
		snap_getver $2 $3
	;;  
	*)
	echo "usage $0 start|stop|restart|getver"
esac
]]>
</INLINE>
</FILE>

<!--
create plugin page file
-->
<FILE Name="/usr/local/emhttp/plugins/snap/snap.page">
<INLINE>
<![CDATA[
Menu="OtherSettings"
Icon="snap.png"
Version="6.00"
Author="Queeg"
Type="php"
Title="SNAP"
]]>
</INLINE>
</FILE>

<!--
create plugin README.md file
-->
<FILE Name="/usr/local/emhttp/plugins/snap/README.md">
<INLINE>
<![CDATA[
**SNAP non-array drive mount and share**

SNAP allows mounting and sharing non-array drives.  Non array drives are mounted and shared through menu selections on the SNAP page of unRAID, or you can set up scripts to run when a USB drive is plugged in.
The current formats supported are: r/w - ntfs (with ntfs-3g driver), reiserfs, btrfs, xfs, ext4 (with discard); ro - ntfs (without ntfs-3g driver), vfat, msdos, ext2, ext3, and hfsplus.
]]>
</INLINE>
</FILE>

<!--
create plugin license file
-->
<FILE Name="/usr/local/emhttp/plugins/snap/license">
<INLINE>
<![CDATA[
Copyright (C) 2010-2014, Dave Lewis or Queegtech.com

All rights reserved.

Redistribution and use in source and binary forms, without modification,
are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Any redistribution or use is done solely for personal benefit and not for any
   commercial purpose or for monetary gain.  Companies may install and use on
   servers they own.  Commercial users, please notify owner within 30 days of installation.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED

You should have received a copy of the GNU General Public License
along with SNAP.  If not, see <http://www.gnu.org/licenses/>.

This Plugin installs SNAP for UnRaid.
All dependencies are installed as needed and everything is controlable from the webgui.
]]>
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
# Stop snap.
/etc/rc.d/rc.snap stop

rm /boot/packages/inotify-tools-3.14-x86_64-1.txz
removepkg inotify-tools
rm -r /usr/local/emhttp/plugins/snap
rm -r /boot/config/plugins/snap
</INLINE>
</FILE>

<FILE Name="/tmp/SnapInstall.sh" Run="/bin/bash">
<INLINE>
<![CDATA[
#!/bin/bash
if [ -f /tmp/preSnapInstallCleanup.sh ]
then
	rm /tmp/preSnapInstallCleanup.sh
fi
if [ -f /tmp/prepareForSnapInstall.sh ]
then
	rm /tmp/prepareForSnapInstall.sh 
fi

#
# Start SNAP and mount any SNAP (usb) drives found.
# dfl
/etc/rc.d/rc.snap start &

echo "Snap installation complete..."
rm /tmp/SnapInstall.sh
]]>
</INLINE>
</FILE>

</PLUGIN>
